// Code generated for package webapp by go-bindata DO NOT EDIT. (@generated)
// sources:
// reporting/webapp/index.html
package webapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\xeb\x5b\xdb\x38\xb3\xff\xbe\x7f\x85\xea\xfd\xd0\xf0\x14\xdb\x40\x28\x2d\x21\xe6\xbc\xbc\xe5\xb2\x94\x96\x02\x69\x0b\xdd\x9e\x3e\xfb\x28\xf6\x38\x56\x62\x4b\xae\xa4\x24\x64\x39\xfc\xef\xe7\x91\x65\x27\xb6\x63\xe7\x42\xd9\x73\x5e\x7f\xa0\xb1\xe6\xa2\x99\xd1\xe8\x37\xba\xb8\xed\x17\xc7\x9f\xde\x7d\xfe\x76\x75\x82\x02\x19\x85\x87\xbf\xb5\xd5\x3f\x28\xc4\xb4\xe7\x18\x40\x8d\xc3\xdf\x10\x6a\x07\x80\x3d\xf5\x03\xa1\x76\x04\x12\x23\x37\xc0\x5c\x80\x74\x8c\xa1\xf4\xcd\xb7\x06\xb2\xf3\xc4\x40\xca\xd8\x84\x9f\x43\x32\x72\x8c\x3b\xf3\xcb\x91\xf9\x8e\x45\x31\x96\xa4\x1b\x82\x81\x5c\x46\x25\x50\xe9\x18\xe7\x27\x0e\x78\x3d\x28\xc9\x52\x1c\x81\x63\x8c\x08\x8c\x63\xc6\x65\x8e\x7d\x4c\x3c\x19\x38\x1e\x8c\x88\x0b\x66\xf2\xb2\x89\x08\x25\x92\xe0\xd0\x14\x2e\x0e\xc1\xd9\x4e\x54\x69\x5d\x92\xc8\x10\x0e\xdf\x1d\x7d\x3d\xe9\xa0\x1b\x50\xaa\x08\xed\xb5\x6d\xdd\x9c\xf2\xbc\x30\x4d\xf4\x6f\xc6\xa4\x90\x1c\xc7\xc8\x34\x53\x33\x42\x42\x07\xc9\x2f\x84\x38\x84\x8e\x21\xe4\x24\x04\x11\x00\x48\x23\x6d\x0e\x38\xf8\x8e\xa1\xbc\x14\x2d\xdb\x8e\xf0\xbd\xeb\x51\xab\x9b\x69\x52\x2f\x2e\x8b\xec\x69\x83\xbd\x6b\x6d\x59\x5b\xb6\x2b\xc4\xac\xcd\x8a\x08\xb5\x5c\x21\x32\x95\x84\x4a\xe8\x71\x22\x27\x8e\x21\x02\xdc\x7c\xbb\x6b\x9e\xd1\xd7\xcd\xb7\xbb\xf7\x3f\xaf\xb7\x31\xbb\xbd\x3b\x7a\xb5\xf5\xfa\xed\xcd\xdd\xd5\xfd\x55\x6f\xcf\x9f\xec\x9e\xdf\x8e\x3e\x5f\x06\x5b\x27\x3b\x7b\xcd\xbb\xe8\xd4\x7d\x1f\x76\x8e\xc6\xe4\xac\x77\x7a\x74\x6b\x7b\x47\xa4\xb3\xf7\xfe\x2e\xca\x34\xbb\x9c\x09\xc1\x38\xe9\x11\xea\x18\x98\x32\x3a\x89\xd8\x30\xed\x77\x1a\xae\x75\x7d\x16\x12\xbb\x83\x18\xcb\x60\xde\x6d\x9f\x51\x69\xe2\x31\x08\x16\x81\xbd\x6b\xbd\x49\x3d\xcf\x37\x97\x9d\x5f\xc9\x44\x35\x5a\x7f\x7c\xfe\xf8\xe1\x35\x12\x01\x89\x10\xa6\x1e\xba\x01\x11\x33\xea\x59\x7d\x81\x7c\xc6\xd1\xf9\xc9\x5b\x24\x86\xb1\x1a\x6c\xc4\xfc\x94\x19\x42\x88\x80\x4a\x91\x08\x44\xe0\x11\x8c\x7e\x0e\x81\x13\x10\xb3\x11\x57\xaa\x6f\x8f\x6e\x2e\xcf\x2f\xcf\x5a\x79\xa5\x1e\x03\x41\x5f\x4a\x34\x66\x7c\x80\x88\x8f\x26\x6c\x88\x54\x66\x22\x19\x00\x8a\x71\x0f\xd0\x88\x60\xe4\x93\x10\x5a\xb6\x5d\x50\xf7\x9d\xf8\x28\x94\xe8\xfc\x04\xed\xff\x38\x4c\xbd\x6c\x0b\x97\x93\x58\x22\xc1\xdd\x59\x20\x99\x10\x56\x9a\x40\x2a\x78\x6a\xe6\xbd\x16\x01\x19\xd9\x4d\xeb\x8d\xd5\x9c\xbd\x27\x21\xeb\x0b\xe3\xb0\x6d\x6b\x35\xeb\x68\xe5\xda\x25\x7b\xdb\xda\xb5\x76\xb2\xb7\x1a\x8d\xed\x17\xdf\x81\x7a\xc4\xff\xa1\xdc\xd1\x2d\x49\x32\x20\x39\x89\xc1\x31\x24\xdc\x4b\x35\x9e\x46\xd6\xff\xf7\x91\xe9\x86\x0c\x0f\x7e\xa0\x87\xb4\x05\x21\x8f\x88\x38\xc4\x93\x16\xa2\x8c\xc2\x41\xda\xfc\x98\x25\x92\x02\x97\x19\x6f\x92\x17\x82\xfc\x0d\x2d\xb4\x65\xbd\xe5\x10\x95\xf9\x2d\x17\x73\xcf\x54\xf8\x03\x1c\x59\x3e\x36\xdd\x00\x46\x9c\x51\xd3\x63\x63\x9a\x53\x24\x39\xa6\x82\x48\xc2\xa8\xd2\xd4\x14\xba\xc1\x67\x3c\x42\x80\x05\x98\x84\x9a\x6c\x28\x17\x6b\x77\x59\x18\xe2\x58\x80\xb7\xb4\x23\xa5\xb7\x85\x38\x93\x58\x42\x63\x7f\xcb\x83\xde\x46\x51\x75\xdb\x4e\xc2\x96\x80\xa7\x9d\xa1\x67\xbb\xcb\xbc\x49\x2e\xe9\x3a\x9f\x8f\x6e\x3e\xa3\x4f\xa7\x48\x03\xd5\x97\x73\x34\x8b\xba\x47\x46\x88\x78\x8e\x81\xe3\xd8\x40\x69\x90\xa7\x83\xae\x88\x6e\x88\x85\x70\x0c\x05\x90\x98\x50\xe0\xa6\x1f\x0e\x89\x37\x1d\x98\x22\x17\x67\xe3\x1c\xa5\xac\x21\x2c\xd0\x14\xdc\x6f\x17\xb0\xb3\x6d\x07\xdb\x05\x69\xdb\x23\xa3\x5c\x47\xfa\xf5\x39\x3a\xce\x53\x31\xf7\x4a\x64\x65\x59\x33\x4f\x4f\x47\xce\x38\xd4\x76\xa2\x63\x90\x98\x84\xa2\x6d\x07\xcd\x39\xc9\x92\x6a\x53\x8d\xc5\x9c\xfe\x94\x6f\x64\x12\xdf\x31\x04\x84\xe0\x4a\xf0\xb4\xf2\x0a\x5e\x55\x68\x70\x37\x84\x4c\xaf\x7e\x49\xfe\x9a\x22\x4a\x7f\x04\x6c\xa4\x2c\xac\x10\x56\xe2\xb3\x8c\xa8\xa2\xf2\x3a\x92\x22\x06\x87\xe7\xc7\x6d\x5b\x06\x8b\x78\xbc\xc3\x87\x07\x54\xf4\xc3\x22\x1e\x7a\x7c\x6c\xdb\xd2\xab\xed\xd7\xae\xef\x78\xa9\x4d\xef\x42\x02\x54\x3e\xc5\x2e\x37\x91\xfc\x27\x6d\x3b\xc6\x12\x9e\x62\xd9\x38\x00\x8a\xfe\x07\x79\x6a\xb2\xbf\x0c\xc3\x30\x7c\xb9\xf1\x4f\x9a\xd9\x91\x2b\xd9\x59\x4b\x5c\x90\xc4\x96\x8f\x49\x08\x1e\x3a\x44\x5b\xc6\xe1\xe9\xd1\xf9\x87\x93\xe3\xd2\x64\xae\x55\x06\xa1\x42\x51\xdf\x31\x7c\x1c\x0a\x30\x0e\xd3\x8a\xb9\xb6\x78\xc9\x20\x31\x20\x71\x9c\x59\xb4\x40\x0d\x42\x9d\x8b\xf3\xab\xab\x93\xe3\x45\x5d\xad\x61\xcb\xe1\xd5\x51\xa7\xb3\xd4\xfb\xa7\x8d\x71\xdb\xae\x9d\xd7\x6d\x3b\x41\x85\x1c\x5a\x16\xad\xab\xd4\x37\x32\x7d\xc6\x1d\xa3\xc7\xd9\x30\x46\x84\x96\xd3\x33\x69\x9f\xae\xa6\x8a\x4f\x6b\x00\x93\x54\xd2\x22\x5e\x35\x4f\x0e\x15\x51\xd4\x35\x9b\x55\x5c\x35\x8e\x06\x7b\x95\x70\x5c\x17\x31\x5c\x1b\x68\x0f\x4b\x6c\x4a\xd6\xeb\x85\x90\x14\x86\xa4\x0e\x57\x9b\x9b\xb8\xa5\xd7\xa3\x2f\x7f\x7f\x89\x5e\xa1\xc5\xde\xa9\x07\x73\x82\x4d\xb8\x8f\x31\xf5\xc0\x73\x0c\xc9\x87\x8b\x74\x27\xdc\xaa\xae\x72\x16\x8a\x65\xc1\x43\xb3\x00\x7a\x66\x37\x64\xee\x00\x4d\x97\x11\x75\x12\x0b\xf2\x8d\x64\xca\x7c\x8c\xca\x6b\x90\x78\x18\x86\x26\x27\xbd\x40\xaa\x55\x1b\xa9\xcc\xa1\x4c\xcd\x82\x49\xa0\x71\x41\x7b\x95\x83\x83\x05\x12\x05\x93\x24\x89\x40\x98\x2e\xe1\xae\xaa\x75\x70\x2f\x4d\x0f\xd3\x1e\xf0\x45\x0a\x92\x88\x06\xc4\xf3\x80\x2e\x8b\xbe\xf6\xec\x89\x8e\x4d\x41\x46\x7b\x97\xc7\x96\x55\xdd\x23\xd4\x67\x05\xef\xc6\x98\x53\x42\x7b\xff\x29\xee\xad\xea\x87\x1b\x80\x3b\x28\x38\x22\x86\xae\x0b\xa2\x06\x27\x9e\xe8\x48\xbd\x27\x22\xc6\x34\xb3\x28\x0e\xcd\x6d\x43\xd5\x55\x3d\x2c\x6a\x8f\x8f\x1e\x1f\xd5\x1a\x39\xc6\xb4\x1e\x5e\x71\x1d\xba\x06\x7b\x35\x14\x05\xef\x2d\xb5\x6a\x9e\xce\xd9\xdc\x5a\x53\x43\x4a\x6d\x77\x2b\xae\x0f\xf3\xfc\x0b\x07\x2b\x81\x6c\x09\x42\x2a\xc4\xd6\xf6\xa8\xb7\x85\xf1\xd7\x68\xad\xd8\x16\xe2\xcd\x6a\x90\xad\x9f\x85\xe5\x70\x3d\xf8\x4e\x85\xea\x41\x5c\x3f\x6b\x42\xb9\x7e\x0a\x80\xbe\x42\x00\xd0\xba\xa8\x9e\x76\x53\xc2\xf6\x15\x7b\x5a\x17\xe0\xf5\xb3\x38\x8e\xcf\x06\xf6\x99\xb2\x25\x0c\x19\xf0\x27\x2e\xa7\xc8\xb8\xcc\xef\x12\xa6\xfc\x1c\x82\x50\x3b\xec\x22\xac\x80\xcb\xa8\x87\xf9\x64\xb9\xb2\x35\xe0\x45\x3f\x8b\xd1\x52\x3f\x2b\x39\x3e\x2d\x0c\x2f\xb4\xfb\xcb\xa1\x50\x3f\xbf\x5c\xf9\xf4\xf3\xff\xeb\xf8\x7a\x5e\x3e\xa9\x70\xe8\xe7\x89\x6e\x2e\xf3\xb3\xb2\x94\x24\xe3\xb8\x5a\x25\x49\xd5\xd4\xd5\x93\x8c\x5c\x57\x55\x52\xfa\xb4\xb6\x64\x98\xb1\x72\x69\xc9\x29\x58\xa3\xc0\xcc\xa4\x96\xf1\x20\xd4\xee\x66\x9b\xc6\xee\x52\x85\xcb\xf6\x48\xa8\xb8\x7f\x2c\xcc\x97\xd5\x36\x4d\x05\x1d\xd3\x99\x97\x28\xca\x16\x53\x2b\xef\x1e\x6b\x35\x65\x08\x76\x98\x6e\x0b\xd7\xd5\x54\xdc\xfd\x3e\xd7\x28\x1c\x83\x3e\x4c\x25\x8c\x3e\xdb\x58\xc4\x1c\xa6\x09\xef\x81\x70\x93\xa3\x07\xd5\xf8\x6c\x56\x7f\x60\x3d\xf1\x8f\x98\x1b\xb2\x9e\x98\x99\xfb\x4b\xba\x97\x6e\xd4\x17\x90\x17\x10\x6b\x49\x35\x84\xba\xe6\x5c\x62\x75\x92\xdd\x39\xc2\x88\xeb\x43\x49\x46\x93\x0b\x83\xa4\x96\x23\xc9\xf4\x15\x02\x91\x56\xa5\xaa\x8a\xc6\xb9\xa6\xf9\x86\xe2\xa1\xaa\xb9\xfb\xbc\xc7\xaa\x02\x7d\x20\x42\xfe\xea\xa1\x6a\x45\x8c\xd3\x45\x72\x1a\x27\x42\xd3\x88\x55\x56\x1a\xbd\x34\xe6\xd9\x11\x66\x15\xcb\x2a\x8b\xe2\x56\xca\xf4\xf0\xb2\xcb\xb8\x07\xdc\x8c\x39\x89\x30\x9f\xbc\x6c\xa1\xa9\x6e\xc7\x99\x3b\x31\x7d\x9c\xd7\x55\x99\x34\x6b\x60\x7c\x3b\xd8\xad\xcd\xd7\xfa\xca\xae\x41\x99\xcf\x1d\xe6\x2d\x3b\x9b\x78\xea\x0a\x66\xe5\x92\xbe\x68\xc5\xb2\xd0\x9f\x29\xac\xf3\xf9\x03\xc1\xd5\xbc\x5a\x7f\xcb\xfe\x7f\xe3\xd5\x6a\xd6\x3f\x61\xbd\xb5\xa6\xf9\xeb\x9f\xc6\xe9\xcd\xd8\xef\xf5\x16\xfc\xcb\x0d\x89\x3b\x70\x0c\x01\xb2\x53\x98\x2b\x8d\xe9\x2c\xda\x58\x3a\x7a\x69\x02\xf2\xc1\xfa\xe7\x64\x0f\x0f\xd9\x74\xad\x3e\x9b\x7f\xc2\x99\x42\xcd\x6c\xcc\x4f\xe9\x2e\xf6\x7a\x80\x92\xbf\xb9\x6d\xcf\xe1\xcc\x98\xdc\x15\xc6\x33\x94\x95\x27\xd4\x82\xc2\x6b\xee\x25\xbf\xcc\x49\xae\x1e\x4f\x2e\x8f\xe7\x2e\x1e\xd1\xec\x3e\x39\xd5\x50\xb8\x55\x76\x3d\xda\x17\x96\x1b\xb2\xa1\xe7\x87\x98\x43\x72\xb7\x8c\xfb\xf8\xde\x0e\x49\x57\xd8\x11\x8b\x80\x4a\xab\x2f\xec\x1d\x6b\x67\xdf\xda\xca\x1a\xd2\x7b\xe6\x54\xe3\xa2\xbb\xfe\xdc\x55\xf4\x52\x5b\x98\x07\x56\xff\xe7\x10\xf8\x24\x31\x43\xff\x34\x9b\xd6\x8e\xb5\x6d\x89\x90\x44\xa5\x6e\xe7\xbf\xaf\xb8\x78\xdf\x64\x3b\xc7\x17\xf2\x7c\x30\xfa\x76\x7e\xd1\xfc\x72\x72\xf9\x77\xf4\xf1\xcd\xc5\xbb\xc1\x0d\xb7\xf9\xc9\xbe\x7d\x1d\xf7\xf6\xf0\xd1\x9f\x67\xef\xc7\xa7\xc7\x1f\xbf\x5e\x1e\xd9\x67\xf1\xd9\xe9\xe9\x7e\x33\xb8\x8b\xcf\x5e\x5f\x0c\x2e\xd7\x74\xe8\xd7\x62\x1b\xb3\x38\x06\xae\x62\xbb\x6d\x6d\xef\x58\xfb\xf6\x30\xf2\xb2\xc6\x65\x8e\x1e\xc5\x97\xdd\x5e\xb0\xff\xef\x57\xdf\xb6\xaf\x2f\xe4\xa8\x79\x43\xdf\xdc\x36\xa3\xde\xd5\x7d\xf0\x65\xff\xc2\xee\xb8\xd7\xe2\xe8\xea\x4d\xf0\x85\x74\xef\x9a\xfb\xfd\x37\x3e\x1e\x9c\x5e\x89\xc1\xe8\x6e\x28\x46\x3e\xde\xea\xee\x5e\x3f\xaf\xa3\xab\x7e\x2d\xd3\x2f\x7f\x2c\xb3\xc8\xc5\xf7\x7f\xde\xec\x75\x62\xe8\x07\xbb\x5f\xb6\x76\xbc\xb7\xfd\x4f\x72\x6f\xf4\xe1\xe4\x0f\x1f\xec\xf7\xd7\x67\xe4\xe6\xa6\x73\x7d\x7d\xdf\xf1\x4f\x6f\x63\xb2\xfd\xf1\xe7\xf0\xab\x77\x34\xe9\x7f\xc1\xfc\xf5\xab\x37\x7b\x57\x5f\xdf\x45\xdf\xc2\xa7\xbb\x38\x37\x8a\x56\x5f\x78\x10\x92\x11\xb7\x28\x48\x9b\xc6\x91\x3d\x1a\xc2\xbf\x76\xac\x3d\x6b\x7b\xc7\xa8\x49\xf0\xfc\xb7\x15\x7d\x3c\xc2\xba\x75\xba\x6c\xf8\x3a\x04\xcb\x27\xa1\x04\xde\x30\x14\xcc\x19\x9b\xa8\x31\xc2\xe1\x10\x36\x91\xcf\x78\x84\xe5\x06\x72\x0e\x73\x1f\x28\x10\x3f\xa5\x6f\xe4\x1a\x11\xe2\x20\x87\x9c\x22\x3d\x2b\x53\x06\x4b\x2b\x68\xa4\x7a\x0e\xa6\xec\x19\x80\x3e\x6e\x1c\x64\xe5\x63\x84\x39\xc2\x71\x8c\x1c\x44\x61\xac\x8c\x6a\xcc\xb4\x43\xd8\x42\xc6\xef\x38\x8e\x8d\xcd\x69\x9b\x87\x25\x6e\x54\x9a\xf0\x50\x80\xb4\x74\xcd\xd7\x42\xdf\x7f\x6c\x16\x08\xc5\x45\xd8\xb9\xd7\x42\x86\x91\xe7\x78\xcc\x99\x3b\x6b\x77\x59\x14\x0f\x25\x78\xad\x42\x37\x45\x5d\x25\xb3\x74\xc8\x5e\xc8\x80\x08\xab\xdc\x69\x99\x53\xf3\x26\xac\xa9\xe1\x56\x08\xb4\x27\x03\xb5\x5e\x99\x67\x9e\xfa\x9c\x97\xf8\xbe\xf5\xe3\xa0\xc4\xf7\x58\x2e\xd2\xa9\x18\x1d\x86\x61\x91\xb7\xc4\xe9\x32\x2a\x64\x1a\xc3\x73\x0f\x39\xa8\xd2\x8b\x83\xdf\x96\x98\x64\xf9\x84\x7a\x8d\x06\x4f\x52\x89\x5b\xc4\x43\x8e\xe3\x4c\xd5\x6e\xe4\xe5\x73\xb1\xce\xfd\x8c\x40\x06\xcc\x13\xc5\xa8\x63\x2f\x0b\xb8\x4a\x86\x72\x74\x54\x5b\x76\xb2\x80\x1c\xb4\x75\x50\x41\x4d\xd7\x82\xd5\xd4\x74\xf9\x9b\x10\x0b\x54\xdb\x46\xa7\x8c\x23\xca\xc6\x68\x0c\xa8\x3f\x14\x12\x89\x38\x24\x12\xc1\x08\xf8\x44\x06\x84\xf6\x14\x8a\x30\x7d\x2c\xaf\xbf\x1e\x03\x2c\x08\xf0\x64\x73\x46\x68\xaf\xa0\x4e\x65\x7e\x8f\xc7\xde\x67\x10\x52\x59\xfa\xf0\x58\x61\x4c\x72\xb6\xaf\xe6\xd3\x09\x76\x83\x46\x43\xbd\x96\xe6\xa5\x7e\x66\xfb\x62\x27\xf7\xfb\xbf\x66\xbf\xad\x3e\x23\xb4\x61\xfc\x37\x35\x36\x90\x4a\xf9\x72\xaa\xa4\xc7\x4f\xc8\x41\x86\x14\xf2\x2f\x23\x3b\x2f\xa7\x38\x02\x35\x9c\x21\x76\xa1\x61\xd8\xc6\x26\x32\xfe\xfa\xcb\xd8\x38\x28\x67\x96\xf2\x26\x89\xc6\x25\x8e\x20\x33\x22\x11\x4e\x5a\x95\xe8\x46\xb9\x4f\x25\xa3\xf8\x52\x91\xa9\xb8\x15\xb3\xb8\x51\xc9\x9d\x44\x76\x8e\x5d\xbb\x66\xd7\x58\xa5\xef\xb7\x9d\x59\xac\xbf\x4f\xb5\xcc\x4d\x98\x64\xc6\x26\xe4\xaa\x49\x97\x69\x9a\xa7\x20\x44\x14\x90\xf4\x78\x9c\x44\x6e\xda\x41\x45\xe4\x36\x2b\x84\x55\x9c\x5a\x33\xa9\x2a\x96\x24\x11\xe6\xd1\x4c\x3f\x69\xba\xb7\xd0\x56\x25\x55\xa7\x7b\x0d\x55\xa7\x7b\x25\xf1\xb1\x1c\x1e\x54\x19\xc4\x24\xb6\x6c\x18\x2f\x45\x9f\x04\xe3\x72\xa7\x6c\x55\x31\xce\x4f\xd0\x57\xaf\xaa\x0c\xc8\x5d\xc1\xce\x33\x3c\x22\xb5\x45\xca\xf5\xa4\x23\x53\xdf\x93\xa6\x2f\xe8\xa9\x8e\x21\xed\xa9\x46\xaf\x8e\x6a\xbd\xda\x3a\x7a\x79\x8b\x91\xbb\xe1\xb3\xe2\xa1\x08\x34\x02\x94\xb0\x7b\xa3\x02\x38\x52\x0c\xca\xa5\xfd\x3c\x9a\xdd\x02\xc2\xa1\x60\x28\xc6\x5c\x40\x72\x9a\xa4\x76\xf2\x96\x65\xcd\xab\x4b\xf6\x43\xba\x46\x1f\xab\x3d\xd1\xb4\xb1\x3c\xe7\x0a\xf0\x3f\xa4\x22\x20\x7e\x8a\xd3\x07\xf3\x7c\xe5\x82\x82\x1c\xdd\x1b\xf1\x6a\x4a\x83\x2a\xb9\xd5\x5b\xc3\xf9\x9a\x5a\xd7\x03\xaf\xa8\x5e\xd5\xd5\xc7\xe5\x80\x25\x78\xa5\xba\xae\x6b\xa3\x90\x98\xcb\x4b\x18\xdf\x8a\x77\x8c\xaa\xd0\x34\x2a\x70\x59\xb1\xb2\x10\x14\x00\x37\x8c\x8e\x92\x50\x35\xc2\x65\x94\x82\x2b\x09\xa3\x48\x32\x74\x0b\xdd\x0e\x73\x07\x20\x51\x07\xf8\x08\x78\x19\x26\x13\x37\x72\x22\x7a\x10\xa6\x52\x8d\x52\xc2\x18\x63\xb5\x64\x54\x20\x14\x32\x17\x2b\x09\x2b\x60\x42\xa2\x57\xc8\xb0\x85\xe4\x80\xa3\xe2\xb6\xb8\x72\xfc\x66\xdd\x59\x8c\x46\x20\x04\xee\x29\xc4\x6d\xc0\x08\x68\x75\xfd\x51\x40\x1b\x89\x1e\x72\xd0\xfb\xce\xa7\x4b\x2b\xc9\x28\xcd\x6e\x55\x0c\x7e\x29\x32\x1c\x5c\x20\x23\xf0\x50\x22\x60\x6c\x2a\x4d\xf3\x58\xae\xe6\x74\x24\x7a\x96\x5a\xd6\x26\xeb\x08\x83\xc2\x58\x0f\xa6\x51\x35\xbf\x13\x4f\x66\x6b\x05\x25\xaa\xb9\xe7\x8c\x29\x4e\xba\xc7\xa5\x11\x61\x71\x32\x19\x16\x84\xa3\x38\xf0\x1a\x42\xfc\x61\x18\x4e\xb2\xc1\x07\x4f\x8d\xbd\x9a\x72\x63\xe8\x0a\x3d\xfe\x22\x19\x7f\xcb\xb2\xca\x29\xb0\xdc\x22\x37\x64\x02\x6a\x92\x10\x95\x72\xb5\x5c\x59\x0b\x28\x5f\x78\xa9\x97\x9b\x4e\x92\x0c\x7b\xf2\xdb\x98\xb6\xad\x3f\x53\x6b\xdb\xfa\x7f\x7e\xfc\x6f\x00\x00\x00\xff\xff\xc9\xed\xef\xa6\x0a\x32\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 12810, mode: os.FileMode(420), modTime: time.Unix(1601080152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
